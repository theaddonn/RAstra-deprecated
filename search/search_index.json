{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RAstra","text":""},{"location":"bedrock_protocol/basics/","title":"The Basics of The Bedrock Protocol","text":""},{"location":"bedrock_protocol/basics/#lets-take-the-network_settings-packet-as-an-example","title":"let's take the Network_Settings packet as an example:","text":"<p>It looks about like this: <code>[0x8F, ]</code></p>"},{"location":"cli/basics/","title":"Basics","text":""},{"location":"cli/basics/#the-basics-of-rastras-cli-commands","title":"The Basics of RAstra's cli commands","text":"<p>let's look at an example: <pre><code>setlang english\n</code></pre></p> <p>\u2192 setlang</p>"},{"location":"cli/commands/","title":"Commands","text":""},{"location":"cli/commands/#a-list-of-all-built-in-cli-commands-in-rastra","title":"A list of all built in cli commands in RAstra","text":""},{"location":"plugins/functions/","title":"Functions","text":""},{"location":"plugins/overview/","title":"Plugins","text":"<p>Plugins are supported by RAstra in many different languages that is thanks to it's really modular building techniques, it uses many modern technologies to accomplish something like that.</p> <p>RAstra plugins are build in a certain way, which is as follows:</p> <pre><code>plugin/\n    main.wasm       # The WASM file containing the code\n    Config.toml     # The toml file containing most of the meta information\n    assets/         # An assets folder containg extra needed content\n        ...\n</code></pre> <p>Note</p> <p>This folder/dir MUST be zipped and the extension renamed from <code>.zip</code> to <code>.rpl</code> (1) (my_plugin.zip \u2192 my_plugin.rpl)</p> <ol> <li>Stands for R-Astra Pl-ugin</li> </ol>"},{"location":"plugins/overview/#mainwasm","title":"main.wasm","text":"<ul> <li>wasm (also known as WebAssembly) is the heart of a plugin, it contains all the code.</li> <li>WebAssembly is a portable bytecode format which allows to write programs in any language and then compile them to it.</li> <li>The best supported languages for wasm are:<ul> <li>Rust</li> <li>Go(lang)</li> <li>C++ / C </li> <li>Kotlin</li> <li>C#</li> <li>AssemblyScript</li> <li>Lua</li> </ul> </li> <li>The functions are all documented here</li> </ul>"},{"location":"plugins/overview/#configtoml","title":"Config.toml","text":"<ul> <li>The configuration file for the plugin</li> <li>The file looks about like this: <pre><code># The name of the plugin\nname = \"Plugin Name\" \n\n# All the authors\nauthor = [\n    \"PotatoMan232\",\n    \"Adrian8115\"\n]\n\n# The Plugin version\nversion = \"1.0.1\"\n\n# The plugin description\ndescription = \"This is a fancy plugin!\"\n\n# Either WASM32 or WASM64,\n# it is the architecture of the plugin's wasm file\narch = \"WASM32\"\n\n# The Api RAstra Version it uses\napi = \"1.0.1\"\n\n# Should the plugin should throw an error if\n# it is used with the wrong api version\n# Can be overwritten by the server's rastra.toml\nforce-api = false\n</code></pre></li> <li>If any fields are missing it won't work, and you'll get an error.</li> </ul>"},{"location":"plugins/overview/#assets","title":"assets/...","text":"<ul> <li>This dir can contain assets which might be used for the plugin.</li> <li>You can get these function from the function <code>[func be added here]</code></li> </ul>"},{"location":"ui/example/","title":"Example","text":""},{"location":"ui/example/#html","title":"Html:","text":"<pre><code>&lt;main&gt;\n    &lt;div&gt;\n        &lt;label&gt;\n            This is a Label?\n        &lt;/label&gt;\n        &lt;button&gt;\n            This ia a button...\n        &lt;/button&gt;\n    &lt;/div&gt;\n\n    // Use custom components!\n    &lt;alert&gt;\n        This is an alert!\n    &lt;/alert&gt;\n&lt;/main&gt;\n</code></pre>"},{"location":"ui/example/#rust","title":"Rust:","text":"<pre><code>use ui::builder::UiBuilder;\nuse ui::element::{Div, Label, Button};\nuse alert_elment_crate::{Alert};\n\n#[Rastra_plugin::Entry]\nfn main() {\n    let builder = UiBuilder::new();\n\n    let ui = builder.build(vec![\n        Div::new(vec![\n            Label::new(\n                \"This is a Label?\"\n            ),\n            Button::new(\n                \"This ia a button...\"\n            )\n        ]),\n\n        // Use custom components!\n        Alert::new(\n            \"This is an alert!\"\n        )\n    ]);\n}\n</code></pre>"}]}